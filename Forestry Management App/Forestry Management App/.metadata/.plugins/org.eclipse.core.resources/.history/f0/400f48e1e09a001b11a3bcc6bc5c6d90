package com.cg.fms.service;

import static org.hamcrest.CoreMatchers.any;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.cg.fms.dto.Contract;
import com.cg.fms.repo.ContractRepository;
import static org.mockito.ArgumentMatchers.any;



@SpringBootTest
public class ContractServiceTest {
	
	@Autowired
	private ContractService contractservice;
	
	@MockBean
	private ContractRepository contractrepo;
	
	@Test
	public void givenMultipleContractThenCompareTheCountWithGivenNumber() {
		when(contractrepo.findAll())
						 .thenReturn(Stream
								 	.of(new Contract(null, null, null, null, null, null, null, null), 
								 		new Contract(null, null, null, null, null, null, null, null))
								 	.collect(Collectors.toList()));
		
		assertEquals(2, contractservice.getAllContracts().size());	
	}
	
	@Test
	public void givenContractnumberThenShouldReturnContractDetails() {
		
		String contractNumber = "101";
		
		String startDate = "03/05/2018";
		String endDate = "10/11/2020";
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date strdate = null;
		Date enddate = null;
		try {
			strdate = df.parse(startDate);
			enddate = df.parse(endDate);
		} catch (ParseException e1) {
			System.out.println("wrong date formate");
			e1.printStackTrace();
		}
		
								 	
		
		Optional<Contract> contract1 = Optional.of(new Contract("101", "500000", strdate, enddate, "approved", null, null, null));
		
		when(contractrepo.findById(any())).thenReturn(contract1);
		
		assertEquals(contract1, contractservice.getContract(contractNumber));
	}
	
	@Test
	public void saveContractTest() {
		Contract contract  = new Contract("110", null, null, null, null, null, null, null);
		
		when(contractrepo.save(contract)).thenReturn(contract);
		
		assertEquals(true, contractservice.addContract(contract));
		
	}
}
